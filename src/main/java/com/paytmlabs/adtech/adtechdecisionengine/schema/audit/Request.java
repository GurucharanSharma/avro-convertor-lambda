/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.paytmlabs.adtech.adtechdecisionengine.schema.audit;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Request extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2407999590026816979L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Request\",\"namespace\":\"com.paytmlabs.adtech.adtechdecisionengine.schema.audit\",\"fields\":[{\"name\":\"request_id\",\"type\":[\"string\",\"null\"]},{\"name\":\"transaction_id\",\"type\":\"string\"},{\"name\":\"transaction_source\",\"type\":\"string\"},{\"name\":\"user_id\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Request> ENCODER =
      new BinaryMessageEncoder<Request>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Request> DECODER =
      new BinaryMessageDecoder<Request>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Request> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Request> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Request> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Request>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Request to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Request from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Request instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Request fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence request_id;
  private java.lang.CharSequence transaction_id;
  private java.lang.CharSequence transaction_source;
  private java.lang.CharSequence user_id;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Request() {}

  /**
   * All-args constructor.
   * @param request_id The new value for request_id
   * @param transaction_id The new value for transaction_id
   * @param transaction_source The new value for transaction_source
   * @param user_id The new value for user_id
   */
  public Request(java.lang.CharSequence request_id, java.lang.CharSequence transaction_id, java.lang.CharSequence transaction_source, java.lang.CharSequence user_id) {
    this.request_id = request_id;
    this.transaction_id = transaction_id;
    this.transaction_source = transaction_source;
    this.user_id = user_id;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return request_id;
    case 1: return transaction_id;
    case 2: return transaction_source;
    case 3: return user_id;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: request_id = (java.lang.CharSequence)value$; break;
    case 1: transaction_id = (java.lang.CharSequence)value$; break;
    case 2: transaction_source = (java.lang.CharSequence)value$; break;
    case 3: user_id = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'request_id' field.
   * @return The value of the 'request_id' field.
   */
  public java.lang.CharSequence getRequestId() {
    return request_id;
  }


  /**
   * Sets the value of the 'request_id' field.
   * @param value the value to set.
   */
  public void setRequestId(java.lang.CharSequence value) {
    this.request_id = value;
  }

  /**
   * Gets the value of the 'transaction_id' field.
   * @return The value of the 'transaction_id' field.
   */
  public java.lang.CharSequence getTransactionId() {
    return transaction_id;
  }


  /**
   * Sets the value of the 'transaction_id' field.
   * @param value the value to set.
   */
  public void setTransactionId(java.lang.CharSequence value) {
    this.transaction_id = value;
  }

  /**
   * Gets the value of the 'transaction_source' field.
   * @return The value of the 'transaction_source' field.
   */
  public java.lang.CharSequence getTransactionSource() {
    return transaction_source;
  }


  /**
   * Sets the value of the 'transaction_source' field.
   * @param value the value to set.
   */
  public void setTransactionSource(java.lang.CharSequence value) {
    this.transaction_source = value;
  }

  /**
   * Gets the value of the 'user_id' field.
   * @return The value of the 'user_id' field.
   */
  public java.lang.CharSequence getUserId() {
    return user_id;
  }


  /**
   * Sets the value of the 'user_id' field.
   * @param value the value to set.
   */
  public void setUserId(java.lang.CharSequence value) {
    this.user_id = value;
  }

  /**
   * Creates a new Request RecordBuilder.
   * @return A new Request RecordBuilder
   */
  public static com.paytmlabs.adtech.adtechdecisionengine.schema.audit.Request.Builder newBuilder() {
    return new com.paytmlabs.adtech.adtechdecisionengine.schema.audit.Request.Builder();
  }

  /**
   * Creates a new Request RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Request RecordBuilder
   */
  public static com.paytmlabs.adtech.adtechdecisionengine.schema.audit.Request.Builder newBuilder(com.paytmlabs.adtech.adtechdecisionengine.schema.audit.Request.Builder other) {
    if (other == null) {
      return new com.paytmlabs.adtech.adtechdecisionengine.schema.audit.Request.Builder();
    } else {
      return new com.paytmlabs.adtech.adtechdecisionengine.schema.audit.Request.Builder(other);
    }
  }

  /**
   * Creates a new Request RecordBuilder by copying an existing Request instance.
   * @param other The existing instance to copy.
   * @return A new Request RecordBuilder
   */
  public static com.paytmlabs.adtech.adtechdecisionengine.schema.audit.Request.Builder newBuilder(com.paytmlabs.adtech.adtechdecisionengine.schema.audit.Request other) {
    if (other == null) {
      return new com.paytmlabs.adtech.adtechdecisionengine.schema.audit.Request.Builder();
    } else {
      return new com.paytmlabs.adtech.adtechdecisionengine.schema.audit.Request.Builder(other);
    }
  }

  /**
   * RecordBuilder for Request instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Request>
    implements org.apache.avro.data.RecordBuilder<Request> {

    private java.lang.CharSequence request_id;
    private java.lang.CharSequence transaction_id;
    private java.lang.CharSequence transaction_source;
    private java.lang.CharSequence user_id;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.paytmlabs.adtech.adtechdecisionengine.schema.audit.Request.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.request_id)) {
        this.request_id = data().deepCopy(fields()[0].schema(), other.request_id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.transaction_id)) {
        this.transaction_id = data().deepCopy(fields()[1].schema(), other.transaction_id);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.transaction_source)) {
        this.transaction_source = data().deepCopy(fields()[2].schema(), other.transaction_source);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.user_id)) {
        this.user_id = data().deepCopy(fields()[3].schema(), other.user_id);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing Request instance
     * @param other The existing instance to copy.
     */
    private Builder(com.paytmlabs.adtech.adtechdecisionengine.schema.audit.Request other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.request_id)) {
        this.request_id = data().deepCopy(fields()[0].schema(), other.request_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.transaction_id)) {
        this.transaction_id = data().deepCopy(fields()[1].schema(), other.transaction_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.transaction_source)) {
        this.transaction_source = data().deepCopy(fields()[2].schema(), other.transaction_source);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.user_id)) {
        this.user_id = data().deepCopy(fields()[3].schema(), other.user_id);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'request_id' field.
      * @return The value.
      */
    public java.lang.CharSequence getRequestId() {
      return request_id;
    }


    /**
      * Sets the value of the 'request_id' field.
      * @param value The value of 'request_id'.
      * @return This builder.
      */
    public com.paytmlabs.adtech.adtechdecisionengine.schema.audit.Request.Builder setRequestId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.request_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'request_id' field has been set.
      * @return True if the 'request_id' field has been set, false otherwise.
      */
    public boolean hasRequestId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'request_id' field.
      * @return This builder.
      */
    public com.paytmlabs.adtech.adtechdecisionengine.schema.audit.Request.Builder clearRequestId() {
      request_id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'transaction_id' field.
      * @return The value.
      */
    public java.lang.CharSequence getTransactionId() {
      return transaction_id;
    }


    /**
      * Sets the value of the 'transaction_id' field.
      * @param value The value of 'transaction_id'.
      * @return This builder.
      */
    public com.paytmlabs.adtech.adtechdecisionengine.schema.audit.Request.Builder setTransactionId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.transaction_id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'transaction_id' field has been set.
      * @return True if the 'transaction_id' field has been set, false otherwise.
      */
    public boolean hasTransactionId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'transaction_id' field.
      * @return This builder.
      */
    public com.paytmlabs.adtech.adtechdecisionengine.schema.audit.Request.Builder clearTransactionId() {
      transaction_id = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'transaction_source' field.
      * @return The value.
      */
    public java.lang.CharSequence getTransactionSource() {
      return transaction_source;
    }


    /**
      * Sets the value of the 'transaction_source' field.
      * @param value The value of 'transaction_source'.
      * @return This builder.
      */
    public com.paytmlabs.adtech.adtechdecisionengine.schema.audit.Request.Builder setTransactionSource(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.transaction_source = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'transaction_source' field has been set.
      * @return True if the 'transaction_source' field has been set, false otherwise.
      */
    public boolean hasTransactionSource() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'transaction_source' field.
      * @return This builder.
      */
    public com.paytmlabs.adtech.adtechdecisionengine.schema.audit.Request.Builder clearTransactionSource() {
      transaction_source = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'user_id' field.
      * @return The value.
      */
    public java.lang.CharSequence getUserId() {
      return user_id;
    }


    /**
      * Sets the value of the 'user_id' field.
      * @param value The value of 'user_id'.
      * @return This builder.
      */
    public com.paytmlabs.adtech.adtechdecisionengine.schema.audit.Request.Builder setUserId(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.user_id = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'user_id' field has been set.
      * @return True if the 'user_id' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'user_id' field.
      * @return This builder.
      */
    public com.paytmlabs.adtech.adtechdecisionengine.schema.audit.Request.Builder clearUserId() {
      user_id = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Request build() {
      try {
        Request record = new Request();
        record.request_id = fieldSetFlags()[0] ? this.request_id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.transaction_id = fieldSetFlags()[1] ? this.transaction_id : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.transaction_source = fieldSetFlags()[2] ? this.transaction_source : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.user_id = fieldSetFlags()[3] ? this.user_id : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Request>
    WRITER$ = (org.apache.avro.io.DatumWriter<Request>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Request>
    READER$ = (org.apache.avro.io.DatumReader<Request>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.request_id == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeString(this.request_id);
    }

    out.writeString(this.transaction_id);

    out.writeString(this.transaction_source);

    out.writeString(this.user_id);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 0) {
        in.readNull();
        this.request_id = null;
      } else {
        this.request_id = in.readString(this.request_id instanceof Utf8 ? (Utf8)this.request_id : null);
      }

      this.transaction_id = in.readString(this.transaction_id instanceof Utf8 ? (Utf8)this.transaction_id : null);

      this.transaction_source = in.readString(this.transaction_source instanceof Utf8 ? (Utf8)this.transaction_source : null);

      this.user_id = in.readString(this.user_id instanceof Utf8 ? (Utf8)this.user_id : null);

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 0) {
            in.readNull();
            this.request_id = null;
          } else {
            this.request_id = in.readString(this.request_id instanceof Utf8 ? (Utf8)this.request_id : null);
          }
          break;

        case 1:
          this.transaction_id = in.readString(this.transaction_id instanceof Utf8 ? (Utf8)this.transaction_id : null);
          break;

        case 2:
          this.transaction_source = in.readString(this.transaction_source instanceof Utf8 ? (Utf8)this.transaction_source : null);
          break;

        case 3:
          this.user_id = in.readString(this.user_id instanceof Utf8 ? (Utf8)this.user_id : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










